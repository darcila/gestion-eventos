version: '3.8' # Usamos una versión reciente de Docker Compose

services:
  eventosdiego: # Tu servicio Node.js existente
    build: . # Construye la imagen desde el Dockerfile actual
    working_dir: /root/
    environment:
      - NODE_ENV=production # Asegúrate de que Node.js esté en modo producción
      - DOMAIN=diego
      - PORT=8090
      - SERVICE_NAME=eventos
      - KEY_MAPBOX=pk.eyJ1IjoiZGllZ29hcmNpbGEiLCJhIjoiY20xam5vNDBkMGdqOTJqbjN1ZnNkbWVkaiJ9.7wPozJejJ_zvY1TzECBSxw
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=darcila
      - POSTGRES_PASSWORD=darcila
      - POSTGRES_PORT=5432
      - POSTGRES_DATABASE=eventos
      - KEY_JWT=secretEventos
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - 85:8090
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - eventos_network


  postgres:
    image: postgis/postgis:17-3.4-alpine
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/restauracion.sql:/docker-entrypoint-initdb.d/restauracion.sql
      - ./scripts/semilla.sql:/docker-entrypoint-initdb.d/semilla.sql
    environment:
      - POSTGRES_USER=darcila
      - POSTGRES_PASSWORD=darcila
      - POSTGRES_DB=eventos
    ports:
      - 5435:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U darcila -d eventos" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
        - eventos_network

  redis:
    image: redis:latest
    ports:
      - 6385:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - eventos_network

volumes:
  postgres-data:
  eventos_diego_redis_data:

networks:
  eventos_network:
    name: eventos_network
