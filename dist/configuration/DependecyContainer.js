"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDependencyContainer = exports.DEPENDENCY_CONTAINER = void 0;
const inversify_1 = require("inversify");
require("reflect-metadata");
const services_1 = require("@application/services");
const api_client_1 = require("@infrastructure/api-client");
const Types_1 = require("@configuration/Types");
const repositories_1 = require("@infrastructure/repositories");
const services_2 = require("@infrastructure/services");
const AutenticacionAppService_1 = require("@application/services/AutenticacionAppService");
const ReservaCacheInfraService_1 = require("@infrastructure/services/ReservaCacheInfraService");
exports.DEPENDENCY_CONTAINER = new inversify_1.Container();
const createDependencyContainer = () => {
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.PostgresqlEventos).toConstantValue(repositories_1.dbEventos);
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.RedisClient).toConstantValue(repositories_1.clientAdapter);
    exports.DEPENDENCY_CONTAINER.bind(api_client_1.MapApiClient).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_1.EventoAppService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_1.AsistenteAppService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_1.ReservaAppService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(AutenticacionAppService_1.AutenticacionAppService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.EventosRepository).to(repositories_1.EventosDao).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.MapRepository).to(api_client_1.MapApiClient).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.AsistentesRepository).to(repositories_1.AsistentesDao).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.ReservasRepository).to(repositories_1.ReservasDao).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.UsuariosRepository).to(repositories_1.UsuariosDao).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(Types_1.TYPES.ReservaCacheRepository).to(repositories_1.ReservasCacheDao).inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_2.EventoInfraService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_2.MapInfraService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_2.AsistenteInfraService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(services_2.ReservaInfraService).toSelf().inSingletonScope();
    exports.DEPENDENCY_CONTAINER.bind(ReservaCacheInfraService_1.ReservaCacheInfraService).toSelf().inSingletonScope();
};
exports.createDependencyContainer = createDependencyContainer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVwZW5kZWN5Q29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZ3VyYXRpb24vRGVwZW5kZWN5Q29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlDQUFzQztBQUN0Qyw0QkFBMEI7QUFDMUIsb0RBQStGO0FBQy9GLDJEQUEwRDtBQUUxRCxnREFBMkM7QUFDM0MsK0RBT3NDO0FBUXRDLHVEQUtrQztBQUNsQywyRkFBc0Y7QUFFdEYsZ0dBQTJGO0FBRTlFLFFBQUEsb0JBQW9CLEdBQUcsSUFBSSxxQkFBUyxFQUFFLENBQUM7QUFFN0MsTUFBTSx5QkFBeUIsR0FBRyxHQUFTLEVBQUU7SUFDaEQsNEJBQW9CLENBQUMsSUFBSSxDQUFtQixhQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxlQUFlLENBQUMsd0JBQVMsQ0FBQyxDQUFDO0lBQ2hHLDRCQUFvQixDQUFDLElBQUksQ0FBaUIsYUFBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyw0QkFBYSxDQUFDLENBQUM7SUFFNUYsNEJBQW9CLENBQUMsSUFBSSxDQUFDLHlCQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXBFLDRCQUFvQixDQUFDLElBQUksQ0FBQywyQkFBZ0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEUsNEJBQW9CLENBQUMsSUFBSSxDQUFDLDhCQUFtQixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMzRSw0QkFBb0IsQ0FBQyxJQUFJLENBQUMsNEJBQWlCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3pFLDRCQUFvQixDQUFDLElBQUksQ0FBQyxpREFBdUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFL0UsNEJBQW9CLENBQUMsSUFBSSxDQUFvQixhQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMseUJBQVUsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDeEcsNEJBQW9CLENBQUMsSUFBSSxDQUF5QixhQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLHlCQUFZLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNHLDRCQUFvQixDQUFDLElBQUksQ0FBdUIsYUFBSyxDQUFDLG9CQUFvQixDQUFDLENBQUMsRUFBRSxDQUFDLDRCQUFhLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2pILDRCQUFvQixDQUFDLElBQUksQ0FBcUIsYUFBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLDBCQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNHLDRCQUFvQixDQUFDLElBQUksQ0FBcUIsYUFBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsRUFBRSxDQUFDLDBCQUFXLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzNHLDRCQUFvQixDQUFDLElBQUksQ0FBeUIsYUFBSyxDQUFDLHNCQUFzQixDQUFDLENBQUMsRUFBRSxDQUFDLCtCQUFnQixDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUV4SCw0QkFBb0IsQ0FBQyxJQUFJLENBQUMsNkJBQWtCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFFLDRCQUFvQixDQUFDLElBQUksQ0FBQywwQkFBZSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN2RSw0QkFBb0IsQ0FBQyxJQUFJLENBQUMsZ0NBQXFCLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzdFLDRCQUFvQixDQUFDLElBQUksQ0FBQyw4QkFBbUIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDM0UsNEJBQW9CLENBQUMsSUFBSSxDQUFDLG1EQUF3QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztBQUNwRixDQUFDLENBQUE7QUF2QlksUUFBQSx5QkFBeUIsNkJBdUJyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRhaW5lciB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHtBc2lzdGVudGVBcHBTZXJ2aWNlLCBFdmVudG9BcHBTZXJ2aWNlLCBSZXNlcnZhQXBwU2VydmljZX0gZnJvbSAnQGFwcGxpY2F0aW9uL3NlcnZpY2VzJztcbmltcG9ydCB7IE1hcEFwaUNsaWVudCB9IGZyb20gJ0BpbmZyYXN0cnVjdHVyZS9hcGktY2xpZW50JztcbmltcG9ydCB7SURhdGFiYXNlLCBJTWFpbn0gZnJvbSBcInBnLXByb21pc2VcIjtcbmltcG9ydCB7VFlQRVN9IGZyb20gXCJAY29uZmlndXJhdGlvbi9UeXBlc1wiO1xuaW1wb3J0IHtcbiAgICBBc2lzdGVudGVzRGFvLCBjbGllbnRBZGFwdGVyLFxuICAgIGRiRXZlbnRvcyxcbiAgICBFdmVudG9zRGFvLFxuICAgIFJlc2VydmFzQ2FjaGVEYW8sXG4gICAgUmVzZXJ2YXNEYW8sXG4gICAgVXN1YXJpb3NEYW9cbn0gZnJvbSBcIkBpbmZyYXN0cnVjdHVyZS9yZXBvc2l0b3JpZXNcIjtcbmltcG9ydCB7XG4gICAgQXNpc3RlbnRlc1JlcG9zaXRvcnksXG4gICAgRXZlbnRvc1JlcG9zaXRvcnksXG4gICAgTWFwQXBpQ2xpZW50UmVwb3NpdG9yeSwgUmVzZXJ2YUNhY2hlUmVwb3NpdG9yeSxcbiAgICBSZXNlcnZhc1JlcG9zaXRvcnksXG4gICAgVXN1YXJpb3NSZXBvc2l0b3J5XG59IGZyb20gXCJAZG9tYWluL3JlcG9zaXRvcnlcIjtcbmltcG9ydCB7XG4gICAgQXNpc3RlbnRlSW5mcmFTZXJ2aWNlLFxuICAgIEV2ZW50b0luZnJhU2VydmljZSxcbiAgICBNYXBJbmZyYVNlcnZpY2UsXG4gICAgUmVzZXJ2YUluZnJhU2VydmljZVxufSBmcm9tIFwiQGluZnJhc3RydWN0dXJlL3NlcnZpY2VzXCI7XG5pbXBvcnQge0F1dGVudGljYWNpb25BcHBTZXJ2aWNlfSBmcm9tIFwiQGFwcGxpY2F0aW9uL3NlcnZpY2VzL0F1dGVudGljYWNpb25BcHBTZXJ2aWNlXCI7XG5pbXBvcnQge0lvUmVkaXNBZGFwdGVyfSBmcm9tIFwiQHR5cGUtY2FjaGVhYmxlL2lvcmVkaXMtYWRhcHRlclwiO1xuaW1wb3J0IHtSZXNlcnZhQ2FjaGVJbmZyYVNlcnZpY2V9IGZyb20gXCJAaW5mcmFzdHJ1Y3R1cmUvc2VydmljZXMvUmVzZXJ2YUNhY2hlSW5mcmFTZXJ2aWNlXCI7XG5cbmV4cG9ydCBjb25zdCBERVBFTkRFTkNZX0NPTlRBSU5FUiA9IG5ldyBDb250YWluZXIoKTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZURlcGVuZGVuY3lDb250YWluZXIgPSAoKTogdm9pZCA9PiB7XG4gICAgREVQRU5ERU5DWV9DT05UQUlORVIuYmluZDxJRGF0YWJhc2U8SU1haW4+PihUWVBFUy5Qb3N0Z3Jlc3FsRXZlbnRvcykudG9Db25zdGFudFZhbHVlKGRiRXZlbnRvcyk7XG4gICAgREVQRU5ERU5DWV9DT05UQUlORVIuYmluZDxJb1JlZGlzQWRhcHRlcj4oVFlQRVMuUmVkaXNDbGllbnQpLnRvQ29uc3RhbnRWYWx1ZShjbGllbnRBZGFwdGVyKTtcblxuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQoTWFwQXBpQ2xpZW50KS50b1NlbGYoKS5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgLy8gU2VydmljaW9zIEFwcFxuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQoRXZlbnRvQXBwU2VydmljZSkudG9TZWxmKCkuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQoQXNpc3RlbnRlQXBwU2VydmljZSkudG9TZWxmKCkuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQoUmVzZXJ2YUFwcFNlcnZpY2UpLnRvU2VsZigpLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kKEF1dGVudGljYWNpb25BcHBTZXJ2aWNlKS50b1NlbGYoKS5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgLy8gcmVwb3NpdG9yaW9zXG4gICAgREVQRU5ERU5DWV9DT05UQUlORVIuYmluZDxFdmVudG9zUmVwb3NpdG9yeT4oVFlQRVMuRXZlbnRvc1JlcG9zaXRvcnkpLnRvKEV2ZW50b3NEYW8pLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kPE1hcEFwaUNsaWVudFJlcG9zaXRvcnk+KFRZUEVTLk1hcFJlcG9zaXRvcnkpLnRvKE1hcEFwaUNsaWVudCkuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQ8QXNpc3RlbnRlc1JlcG9zaXRvcnk+KFRZUEVTLkFzaXN0ZW50ZXNSZXBvc2l0b3J5KS50byhBc2lzdGVudGVzRGFvKS5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgREVQRU5ERU5DWV9DT05UQUlORVIuYmluZDxSZXNlcnZhc1JlcG9zaXRvcnk+KFRZUEVTLlJlc2VydmFzUmVwb3NpdG9yeSkudG8oUmVzZXJ2YXNEYW8pLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kPFVzdWFyaW9zUmVwb3NpdG9yeT4oVFlQRVMuVXN1YXJpb3NSZXBvc2l0b3J5KS50byhVc3Vhcmlvc0RhbykuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQ8UmVzZXJ2YUNhY2hlUmVwb3NpdG9yeT4oVFlQRVMuUmVzZXJ2YUNhY2hlUmVwb3NpdG9yeSkudG8oUmVzZXJ2YXNDYWNoZURhbykuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIC8vIHNlcnZpY2lvcyBpbmZyYWVzdHJ1Y3R1cmFcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kKEV2ZW50b0luZnJhU2VydmljZSkudG9TZWxmKCkuaW5TaW5nbGV0b25TY29wZSgpO1xuICAgIERFUEVOREVOQ1lfQ09OVEFJTkVSLmJpbmQoTWFwSW5mcmFTZXJ2aWNlKS50b1NlbGYoKS5pblNpbmdsZXRvblNjb3BlKCk7XG4gICAgREVQRU5ERU5DWV9DT05UQUlORVIuYmluZChBc2lzdGVudGVJbmZyYVNlcnZpY2UpLnRvU2VsZigpLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kKFJlc2VydmFJbmZyYVNlcnZpY2UpLnRvU2VsZigpLmluU2luZ2xldG9uU2NvcGUoKTtcbiAgICBERVBFTkRFTkNZX0NPTlRBSU5FUi5iaW5kKFJlc2VydmFDYWNoZUluZnJhU2VydmljZSkudG9TZWxmKCkuaW5TaW5nbGV0b25TY29wZSgpO1xufVxuIl19