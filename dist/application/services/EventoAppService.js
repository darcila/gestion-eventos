"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventoAppService = void 0;
const inversify_1 = require("inversify");
require("reflect-metadata");
const response_1 = require("@domain/response");
const entities_1 = require("@domain/entities");
const _configuration_1 = require("@configuration");
const services_1 = require("@infrastructure/services");
const ReservaCacheInfraService_1 = require("@infrastructure/services/ReservaCacheInfraService");
let EventoAppService = class EventoAppService {
    constructor() {
        this.eventoInfraService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.EventoInfraService);
        this.mapInfraService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.MapInfraService);
        this.reservaCacheInfraService = _configuration_1.DEPENDENCY_CONTAINER.get(ReservaCacheInfraService_1.ReservaCacheInfraService);
    }
    async getEvento(id) {
        const result = await this.eventoInfraService.consultar(id);
        return response_1.Result.ok(result);
    }
    async postEvento(evento) {
        const eventoEntity = entities_1.EventoEntity.create(evento.nombre, evento.descripcion, evento.lugar, evento.ciudad, evento.fecha, evento.hora, evento.categoria, evento.capacidad, evento.valor);
        eventoEntity.id = await this.eventoInfraService.guardar(eventoEntity);
        return response_1.Result.ok(eventoEntity);
    }
    async patchEvento(evento) {
        this.prevalidarCamposEvento(evento);
        const eventoEntity = await this.eventoInfraService.actualizar(evento);
        return response_1.Result.ok(eventoEntity);
    }
    async deleteEvento(id) {
        const estado = await this.eventoInfraService.eliminar(id);
        if (estado) {
            return response_1.Result.ok({ mensaje: 'Evento eliminado', id });
        }
        return response_1.Result.ok({ mensaje: 'Evento no eliminado', id });
    }
    async listarLugaresCercanos(tipo, evento) {
        const eventoEntity = await this.eventoInfraService.consultar(evento);
        let lat;
        let lng;
        if (eventoEntity.ubicacion) {
            const ubicacion = eventoEntity.ubicacion;
            lat = ubicacion.x;
            lng = ubicacion.y;
        }
        else {
            throw new Error('Evento no tiene ubicaci√≥n');
        }
        const eventos = await this.mapInfraService.consultarLugaresCercanos(lat, lng, tipo);
        return response_1.Result.ok(eventos);
    }
    async listarEventosCercanos(direccion, distancia, ciudad) {
        const ubicacion = await this.mapInfraService.consultarUbicacion(direccion, ciudad);
        const eventos = await this.eventoInfraService.consultarEventosCercanos(ubicacion[0], ubicacion[1], distancia);
        return response_1.Result.ok(eventos);
    }
    async asistentesEvento(id) {
        const cache = await this.reservaCacheInfraService.getCacheAsistentesCount(id);
        if (cache) {
            return response_1.Result.ok(cache);
        }
        const asistentes = await this.eventoInfraService.consultarAsistentes(id);
        await this.reservaCacheInfraService.setCacheAasistentesCount(id, asistentes);
        return response_1.Result.ok(asistentes);
    }
    async asistentesEventos() {
        const asistentes = await this.eventoInfraService.consultarAsistentesEventos();
        return response_1.Result.ok(asistentes);
    }
    prevalidarCamposEvento(evento) {
        if (!evento.nombre && !evento.fecha && !evento.hora && !evento.capacidad && !evento.valor) {
            throw new Error('Debes enviar al menos un campo a actualizar');
        }
    }
};
exports.EventoAppService = EventoAppService;
exports.EventoAppService = EventoAppService = __decorate([
    (0, inversify_1.injectable)()
], EventoAppService);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRvQXBwU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHBsaWNhdGlvbi9zZXJ2aWNlcy9FdmVudG9BcHBTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLHlDQUF1QztBQUN2Qyw0QkFBMEI7QUFDMUIsK0NBQW9EO0FBQ3BELCtDQVEwQjtBQUMxQixtREFBb0Q7QUFDcEQsdURBQTZFO0FBRTdFLGdHQUEyRjtBQUdwRixJQUFNLGdCQUFnQixHQUF0QixNQUFNLGdCQUFnQjtJQUF0QjtRQUNLLHVCQUFrQixHQUFHLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyw2QkFBa0IsQ0FBQyxDQUFDO1FBQ2xFLG9CQUFlLEdBQUcscUNBQW9CLENBQUMsR0FBRyxDQUFDLDBCQUFlLENBQUMsQ0FBQztRQUM1RCw2QkFBd0IsR0FBRyxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsbURBQXdCLENBQUMsQ0FBQztJQTREMUYsQ0FBQztJQTFERyxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQVU7UUFDdEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNELE9BQU8saUJBQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNELEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBdUI7UUFDcEMsTUFBTSxZQUFZLEdBQUcsdUJBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0TCxZQUFZ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QUUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM3RSxPQUFPLGlCQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxLQUFLLENBQUMsaUJBQWlCO1FBQ25CLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDOUUsT0FBTyxpQkFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ08sc0JBQXNCLENBQUMsTUFBd0I7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEYsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBQ25FLENBQUM7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQS9EWSw0Q0FBZ0I7MkJBQWhCLGdCQUFnQjtJQUQ1QixJQUFBLHNCQUFVLEdBQUU7R0FDQSxnQkFBZ0IsQ0ErRDVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5qZWN0YWJsZSB9IGZyb20gJ2ludmVyc2lmeSc7XG5pbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuaW1wb3J0IHsgUmVzdWx0LCBSZXNwb25zZSB9IGZyb20gJ0Bkb21haW4vcmVzcG9uc2UnO1xuaW1wb3J0IHtcbiAgICBFdmVudG9Bc2lzdGVudGVEaWEsXG4gICAgRXZlbnRvQXNpc3RlbnRlcyxcbiAgICBFdmVudG9FbnRpdHksXG4gICAgRXZlbnRvTHVnYXJDZXJjYW5vLFxuICAgIEV2ZW50b1BhdGNoUGFyYW0sXG4gICAgRXZlbnRvUG9zdFBhcmFtLFxuICAgIEV2ZW50b1Jlc3B1ZXN0YU1lbnNhamVcbn0gZnJvbSBcIkBkb21haW4vZW50aXRpZXNcIjtcbmltcG9ydCB7REVQRU5ERU5DWV9DT05UQUlORVJ9IGZyb20gXCJAY29uZmlndXJhdGlvblwiO1xuaW1wb3J0IHtFdmVudG9JbmZyYVNlcnZpY2UsIE1hcEluZnJhU2VydmljZX0gZnJvbSBcIkBpbmZyYXN0cnVjdHVyZS9zZXJ2aWNlc1wiO1xuaW1wb3J0IHtVYmljYWNpb259IGZyb20gXCJAZG9tYWluL2VudGl0aWVzL01hcEVudGl0eVwiO1xuaW1wb3J0IHtSZXNlcnZhQ2FjaGVJbmZyYVNlcnZpY2V9IGZyb20gXCJAaW5mcmFzdHJ1Y3R1cmUvc2VydmljZXMvUmVzZXJ2YUNhY2hlSW5mcmFTZXJ2aWNlXCI7XG5cbkBpbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBFdmVudG9BcHBTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGV2ZW50b0luZnJhU2VydmljZSA9IERFUEVOREVOQ1lfQ09OVEFJTkVSLmdldChFdmVudG9JbmZyYVNlcnZpY2UpO1xuICAgIHByaXZhdGUgbWFwSW5mcmFTZXJ2aWNlID0gREVQRU5ERU5DWV9DT05UQUlORVIuZ2V0KE1hcEluZnJhU2VydmljZSk7XG4gICAgcHJpdmF0ZSByZXNlcnZhQ2FjaGVJbmZyYVNlcnZpY2UgPSBERVBFTkRFTkNZX0NPTlRBSU5FUi5nZXQoUmVzZXJ2YUNhY2hlSW5mcmFTZXJ2aWNlKTtcblxuICAgIGFzeW5jIGdldEV2ZW50byhpZDogbnVtYmVyKTogUHJvbWlzZTxSZXNwb25zZTxFdmVudG9FbnRpdHkgfCBudWxsPj4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmV2ZW50b0luZnJhU2VydmljZS5jb25zdWx0YXIoaWQpO1xuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKHJlc3VsdCk7XG4gICAgfVxuICAgIGFzeW5jIHBvc3RFdmVudG8oZXZlbnRvOiBFdmVudG9Qb3N0UGFyYW0pOiBQcm9taXNlPFJlc3BvbnNlPEV2ZW50b0VudGl0eSB8IG51bGw+PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50b0VudGl0eSA9IEV2ZW50b0VudGl0eS5jcmVhdGUoZXZlbnRvLm5vbWJyZSwgZXZlbnRvLmRlc2NyaXBjaW9uLCBldmVudG8ubHVnYXIsIGV2ZW50by5jaXVkYWQsIGV2ZW50by5mZWNoYSwgZXZlbnRvLmhvcmEsIGV2ZW50by5jYXRlZ29yaWEsIGV2ZW50by5jYXBhY2lkYWQsIGV2ZW50by52YWxvcik7XG4gICAgICAgIGV2ZW50b0VudGl0eS5pZCA9IGF3YWl0IHRoaXMuZXZlbnRvSW5mcmFTZXJ2aWNlLmd1YXJkYXIoZXZlbnRvRW50aXR5KTtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vayhldmVudG9FbnRpdHkpO1xuICAgIH1cbiAgICBhc3luYyBwYXRjaEV2ZW50byhldmVudG86IEV2ZW50b1BhdGNoUGFyYW0pOiBQcm9taXNlPFJlc3BvbnNlPEV2ZW50b0VudGl0eSB8IG51bGw+PiB7XG4gICAgICAgIHRoaXMucHJldmFsaWRhckNhbXBvc0V2ZW50byhldmVudG8pO1xuICAgICAgICBjb25zdCBldmVudG9FbnRpdHkgPSBhd2FpdCB0aGlzLmV2ZW50b0luZnJhU2VydmljZS5hY3R1YWxpemFyKGV2ZW50byk7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2soZXZlbnRvRW50aXR5KTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlRXZlbnRvKGlkOiBudW1iZXIpOiBQcm9taXNlPFJlc3BvbnNlPEV2ZW50b1Jlc3B1ZXN0YU1lbnNhamUgfCBudWxsPj4ge1xuICAgICAgICBjb25zdCBlc3RhZG8gPSBhd2FpdCB0aGlzLmV2ZW50b0luZnJhU2VydmljZS5lbGltaW5hcihpZCk7XG4gICAgICAgIGlmIChlc3RhZG8pIHtcbiAgICAgICAgICAgIHJldHVybiBSZXN1bHQub2soeyBtZW5zYWplOiAnRXZlbnRvIGVsaW1pbmFkbycsIGlkIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZXN1bHQub2soeyBtZW5zYWplOiAnRXZlbnRvIG5vIGVsaW1pbmFkbycsIGlkIH0pO1xuICAgIH1cbiAgICBhc3luYyBsaXN0YXJMdWdhcmVzQ2VyY2Fub3ModGlwbzogc3RyaW5nLCBldmVudG86IG51bWJlcik6IFByb21pc2U8UmVzcG9uc2U8RXZlbnRvTHVnYXJDZXJjYW5vW10gfCBudWxsPj4ge1xuICAgICAgICBjb25zdCBldmVudG9FbnRpdHkgPSBhd2FpdCB0aGlzLmV2ZW50b0luZnJhU2VydmljZS5jb25zdWx0YXIoZXZlbnRvKTtcbiAgICAgICAgbGV0IGxhdDogbnVtYmVyO1xuICAgICAgICBsZXQgbG5nOiBudW1iZXI7XG4gICAgICAgIGlmIChldmVudG9FbnRpdHkudWJpY2FjaW9uKSB7XG4gICAgICAgICAgICBjb25zdCB1YmljYWNpb246IFViaWNhY2lvbiA9IGV2ZW50b0VudGl0eS51YmljYWNpb24gYXMgdW5rbm93biBhcyBVYmljYWNpb247XG4gICAgICAgICAgICBsYXQgPSB1YmljYWNpb24ueDtcbiAgICAgICAgICAgIGxuZyA9IHViaWNhY2lvbi55O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudG8gbm8gdGllbmUgdWJpY2FjacOzbicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV2ZW50b3MgPSBhd2FpdCB0aGlzLm1hcEluZnJhU2VydmljZS5jb25zdWx0YXJMdWdhcmVzQ2VyY2Fub3MobGF0LCBsbmcsIHRpcG8pO1xuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKGV2ZW50b3MpO1xuICAgIH1cbiAgICBhc3luYyBsaXN0YXJFdmVudG9zQ2VyY2Fub3MoZGlyZWNjaW9uOiBzdHJpbmcsIGRpc3RhbmNpYTogbnVtYmVyLCBjaXVkYWQ6IHN0cmluZyk6IFByb21pc2U8UmVzcG9uc2U8RXZlbnRvTHVnYXJDZXJjYW5vW10gfCBudWxsPj4ge1xuICAgICAgICBjb25zdCB1YmljYWNpb24gPSBhd2FpdCB0aGlzLm1hcEluZnJhU2VydmljZS5jb25zdWx0YXJVYmljYWNpb24oZGlyZWNjaW9uLCBjaXVkYWQpO1xuICAgICAgICBjb25zdCBldmVudG9zID0gYXdhaXQgdGhpcy5ldmVudG9JbmZyYVNlcnZpY2UuY29uc3VsdGFyRXZlbnRvc0NlcmNhbm9zKHViaWNhY2lvblswXSwgdWJpY2FjaW9uWzFdLCBkaXN0YW5jaWEpO1xuICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKGV2ZW50b3MpO1xuICAgIH1cbiAgICBhc3luYyBhc2lzdGVudGVzRXZlbnRvKGlkOiBudW1iZXIpOiBQcm9taXNlPFJlc3BvbnNlPEV2ZW50b0FzaXN0ZW50ZXMgfCBudWxsPj4ge1xuICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IHRoaXMucmVzZXJ2YUNhY2hlSW5mcmFTZXJ2aWNlLmdldENhY2hlQXNpc3RlbnRlc0NvdW50KGlkKTtcbiAgICAgICAgaWYgKGNhY2hlKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzdWx0Lm9rKGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhc2lzdGVudGVzID0gYXdhaXQgdGhpcy5ldmVudG9JbmZyYVNlcnZpY2UuY29uc3VsdGFyQXNpc3RlbnRlcyhpZCk7XG4gICAgICAgIGF3YWl0IHRoaXMucmVzZXJ2YUNhY2hlSW5mcmFTZXJ2aWNlLnNldENhY2hlQWFzaXN0ZW50ZXNDb3VudChpZCwgYXNpc3RlbnRlcyk7XG4gICAgICAgIHJldHVybiBSZXN1bHQub2soYXNpc3RlbnRlcyk7XG4gICAgfVxuICAgIGFzeW5jIGFzaXN0ZW50ZXNFdmVudG9zKCk6IFByb21pc2U8UmVzcG9uc2U8RXZlbnRvQXNpc3RlbnRlRGlhW10gfCBudWxsPj4ge1xuICAgICAgICBjb25zdCBhc2lzdGVudGVzID0gYXdhaXQgdGhpcy5ldmVudG9JbmZyYVNlcnZpY2UuY29uc3VsdGFyQXNpc3RlbnRlc0V2ZW50b3MoKTtcbiAgICAgICAgcmV0dXJuIFJlc3VsdC5vayhhc2lzdGVudGVzKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBwcmV2YWxpZGFyQ2FtcG9zRXZlbnRvKGV2ZW50bzogRXZlbnRvUGF0Y2hQYXJhbSk6IHZvaWQge1xuICAgICAgICBpZiAoIWV2ZW50by5ub21icmUgJiYgIWV2ZW50by5mZWNoYSAmJiAhZXZlbnRvLmhvcmEgJiYgIWV2ZW50by5jYXBhY2lkYWQgJiYgIWV2ZW50by52YWxvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWJlcyBlbnZpYXIgYWwgbWVub3MgdW4gY2FtcG8gYSBhY3R1YWxpemFyJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=