"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorHandler = void 0;
const exceptions_1 = require("@domain/exceptions");
const buildErrorResponse = (error, cause, statusCode, errorCode) => {
    return {
        isError: true,
        message: error.message,
        code: error.code || errorCode,
        cause: cause || error.stack,
        timestamp: new Date(),
        statusCode: statusCode || error.statusCode,
    };
};
const translateError = (error) => {
    let code = exceptions_1.ErrorCode.UNKNOWN_ERROR;
    if (error.validation) {
        code = exceptions_1.ErrorCode.BAD_MESSAGE;
    }
    return buildErrorResponse(error, error.message, error.statusCode, code);
    if (error instanceof exceptions_1.Exception) {
        const cause = typeof error.cause === 'string' ? error.cause : undefined;
        return buildErrorResponse(error, cause);
    }
    console.error('log default translator: ', error);
    return buildErrorResponse(error, 'Default translator error', 500, exceptions_1.ErrorCode.UNKNOWN_ERROR);
};
const errorHandler = (application) => {
    application.setErrorHandler((error, req, reply) => {
        const exception = translateError(error);
        reply.statusCode = (exception === null || exception === void 0 ? void 0 : exception.statusCode) || 500;
        reply.send(Object.assign(Object.assign({}, exception), { id: req.id }));
    });
};
exports.errorHandler = errorHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3JNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2luZnJhc3RydWN0dXJlL2FwaS9taWRkbGV3YXJlcy9FcnJvck1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQXdEO0FBRXhELE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFtQixFQUFFLEtBQWMsRUFBRSxVQUFtQixFQUFFLFNBQXFCLEVBQUUsRUFBRTtJQUMzRyxPQUFPO1FBQ0gsT0FBTyxFQUFFLElBQUk7UUFDYixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLElBQUksU0FBUztRQUM3QixLQUFLLEVBQUUsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLO1FBQzNCLFNBQVMsRUFBRSxJQUFJLElBQUksRUFBRTtRQUNyQixVQUFVLEVBQUUsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVO0tBQzdDLENBQUM7QUFDTixDQUFDLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxDQUFDLEtBQW1CLEVBQUUsRUFBRTtJQUMzQyxJQUFJLElBQUksR0FBRyxzQkFBUyxDQUFDLGFBQWEsQ0FBQztJQUNuQyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNuQixJQUFJLEdBQUcsc0JBQVMsQ0FBQyxXQUFXLENBQUM7SUFDakMsQ0FBQztJQUNELE9BQU8sa0JBQWtCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RSxJQUFJLEtBQUssWUFBWSxzQkFBUyxFQUFFLENBQUM7UUFDN0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxLQUFLLENBQUMsS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3hFLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxFQUFFLEtBQWUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pELE9BQU8sa0JBQWtCLENBQUMsS0FBSyxFQUFFLDBCQUEwQixFQUFFLEdBQUcsRUFBRSxzQkFBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRS9GLENBQUMsQ0FBQztBQUVLLE1BQU0sWUFBWSxHQUFHLENBQUMsV0FBNEIsRUFBUSxFQUFFO0lBQy9ELFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQzlDLE1BQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLFVBQVUsS0FBSSxHQUFHLENBQUM7UUFDaEQsS0FBSyxDQUFDLElBQUksaUNBQU0sU0FBUyxLQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFHLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUM7QUFOVyxRQUFBLFlBQVksZ0JBTXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmFzdGlmeUVycm9yLCBGYXN0aWZ5SW5zdGFuY2UgfSBmcm9tICdmYXN0aWZ5JztcbmltcG9ydCB7RXJyb3JDb2RlLCBFeGNlcHRpb259IGZyb20gJ0Bkb21haW4vZXhjZXB0aW9ucyc7XG5cbmNvbnN0IGJ1aWxkRXJyb3JSZXNwb25zZSA9IChlcnJvcjogRmFzdGlmeUVycm9yLCBjYXVzZT86IHN0cmluZywgc3RhdHVzQ29kZT86IG51bWJlciwgZXJyb3JDb2RlPzogRXJyb3JDb2RlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNFcnJvcjogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgY29kZTogZXJyb3IuY29kZSB8fCBlcnJvckNvZGUsXG4gICAgICAgIGNhdXNlOiBjYXVzZSB8fCBlcnJvci5zdGFjayxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IGVycm9yLnN0YXR1c0NvZGUsXG4gICAgfTtcbn07XG5cbmNvbnN0IHRyYW5zbGF0ZUVycm9yID0gKGVycm9yOiBGYXN0aWZ5RXJyb3IpID0+IHtcbiAgICBsZXQgY29kZSA9IEVycm9yQ29kZS5VTktOT1dOX0VSUk9SO1xuICAgIGlmIChlcnJvci52YWxpZGF0aW9uKSB7XG4gICAgICAgIGNvZGUgPSBFcnJvckNvZGUuQkFEX01FU1NBR0U7XG4gICAgfVxuICAgIHJldHVybiBidWlsZEVycm9yUmVzcG9uc2UoZXJyb3IsIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YXR1c0NvZGUsIGNvZGUpO1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEV4Y2VwdGlvbikge1xuICAgICAgICBjb25zdCBjYXVzZSA9IHR5cGVvZiBlcnJvci5jYXVzZSA9PT0gJ3N0cmluZycgPyBlcnJvci5jYXVzZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGJ1aWxkRXJyb3JSZXNwb25zZShlcnJvciwgY2F1c2UgYXMgc3RyaW5nKTtcbiAgICB9XG4gICAgY29uc29sZS5lcnJvcignbG9nIGRlZmF1bHQgdHJhbnNsYXRvcjogJywgZXJyb3IpO1xuICAgIHJldHVybiBidWlsZEVycm9yUmVzcG9uc2UoZXJyb3IsICdEZWZhdWx0IHRyYW5zbGF0b3IgZXJyb3InLCA1MDAsIEVycm9yQ29kZS5VTktOT1dOX0VSUk9SKTtcblxufTtcblxuZXhwb3J0IGNvbnN0IGVycm9ySGFuZGxlciA9IChhcHBsaWNhdGlvbjogRmFzdGlmeUluc3RhbmNlKTogdm9pZCA9PiB7XG4gICAgYXBwbGljYXRpb24uc2V0RXJyb3JIYW5kbGVyKChlcnJvciwgcmVxLCByZXBseSkgPT4ge1xuICAgICAgICBjb25zdCBleGNlcHRpb24gPSB0cmFuc2xhdGVFcnJvcihlcnJvcik7XG4gICAgICAgIHJlcGx5LnN0YXR1c0NvZGUgPSBleGNlcHRpb24/LnN0YXR1c0NvZGUgfHwgNTAwO1xuICAgICAgICByZXBseS5zZW5kKHsgLi4uZXhjZXB0aW9uLCBpZDogcmVxLmlkIH0pO1xuICAgIH0pO1xufTtcbiJdfQ==