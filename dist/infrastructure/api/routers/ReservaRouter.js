"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reservaDelete = exports.reservaPatch = exports.reservaPost = exports.reservaGet = void 0;
const services_1 = require("@application/services");
const _configuration_1 = require("@configuration");
const reservaGet = async (req, reply) => {
    const reservaService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.ReservaAppService);
    const id = req.params.id;
    const response = await reservaService.getReserva(id);
    return reply.send(Object.assign(Object.assign({}, response), { id: req.id }));
};
exports.reservaGet = reservaGet;
const reservaPost = async (req, reply) => {
    const reservaService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.ReservaAppService);
    const response = await reservaService.postReserva(req.body);
    return reply.send(Object.assign(Object.assign({}, response), { id: req.id }));
};
exports.reservaPost = reservaPost;
const reservaPatch = async (req, reply) => {
    const reservaService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.ReservaAppService);
    const response = await reservaService.patchReserva(req.body);
    return reply.send(Object.assign(Object.assign({}, response), { id: req.id }));
};
exports.reservaPatch = reservaPatch;
const reservaDelete = async (req, reply) => {
    const reservaService = _configuration_1.DEPENDENCY_CONTAINER.get(services_1.ReservaAppService);
    const id = req.params.id;
    const response = await reservaService.deleteReserva(id);
    return reply.send(Object.assign(Object.assign({}, response), { id: req.id }));
};
exports.reservaDelete = reservaDelete;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzZXJ2YVJvdXRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pbmZyYXN0cnVjdHVyZS9hcGkvcm91dGVycy9SZXNlcnZhUm91dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUEwRDtBQUMxRCxtREFBc0Q7QUFRL0MsTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUFFLEdBQWdELEVBQUUsS0FBbUIsRUFBZ0MsRUFBRTtJQUNwSSxNQUFNLGNBQWMsR0FBRyxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsNEJBQWlCLENBQUMsQ0FBQztJQUNuRSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztJQUN6QixNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDckQsT0FBTyxLQUFLLENBQUMsSUFBSSxpQ0FBTSxRQUFRLEtBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUcsQ0FBQztBQUNuRCxDQUFDLENBQUM7QUFMVyxRQUFBLFVBQVUsY0FLckI7QUFFSyxNQUFNLFdBQVcsR0FBRyxLQUFLLEVBQUUsR0FBK0MsRUFBRSxLQUFtQixFQUFnQyxFQUFFO0lBQ3BJLE1BQU0sY0FBYyxHQUFHLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyw0QkFBaUIsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUQsT0FBTyxLQUFLLENBQUMsSUFBSSxpQ0FBTSxRQUFRLEtBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUcsQ0FBQztBQUNuRCxDQUFDLENBQUE7QUFKWSxRQUFBLFdBQVcsZUFJdkI7QUFFTSxNQUFNLFlBQVksR0FBRyxLQUFLLEVBQUUsR0FBZ0QsRUFBRSxLQUFtQixFQUFnQyxFQUFFO0lBQ3RJLE1BQU0sY0FBYyxHQUFHLHFDQUFvQixDQUFDLEdBQUcsQ0FBQyw0QkFBaUIsQ0FBQyxDQUFDO0lBQ25FLE1BQU0sUUFBUSxHQUFHLE1BQU0sY0FBYyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0QsT0FBTyxLQUFLLENBQUMsSUFBSSxpQ0FBTSxRQUFRLEtBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUcsQ0FBQztBQUNuRCxDQUFDLENBQUE7QUFKWSxRQUFBLFlBQVksZ0JBSXhCO0FBRU0sTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLEdBQWdELEVBQUUsS0FBbUIsRUFBZ0MsRUFBRTtJQUN2SSxNQUFNLGNBQWMsR0FBRyxxQ0FBb0IsQ0FBQyxHQUFHLENBQUMsNEJBQWlCLENBQUMsQ0FBQztJQUNuRSxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQTtJQUN4QixNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEQsT0FBTyxLQUFLLENBQUMsSUFBSSxpQ0FBTSxRQUFRLEtBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUcsQ0FBQztBQUNuRCxDQUFDLENBQUE7QUFMWSxRQUFBLGFBQWEsaUJBS3pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVzZXJ2YUFwcFNlcnZpY2UgfSBmcm9tICdAYXBwbGljYXRpb24vc2VydmljZXMnOyAvLyBBc2Vnw7pyYXRlIGRlIHRlbmVyIGVzdGUgc2VydmljaW8gZGVmaW5pZG9cbmltcG9ydCB7IERFUEVOREVOQ1lfQ09OVEFJTkVSIH0gZnJvbSAnQGNvbmZpZ3VyYXRpb24nO1xuaW1wb3J0IHsgRmFzdGlmeVJlcXVlc3QsIEZhc3RpZnlSZXBseSB9IGZyb20gJ2Zhc3RpZnknO1xuaW1wb3J0IHtcbiAgICBSZXNlcnZhR2V0UGFyYW0sXG4gICAgUmVzZXJ2YVBvc3RQYXJhbSxcbiAgICBSZXNlcnZhUGF0Y2hQYXJhbVxufSBmcm9tIFwiQGRvbWFpbi9lbnRpdGllc1wiOyAvLyBBc2Vnw7pyYXRlIGRlIHRlbmVyIGVzdGFzIGVudGlkYWRlcyBkZWZpbmlkYXNcblxuZXhwb3J0IGNvbnN0IHJlc2VydmFHZXQgPSBhc3luYyAocmVxOiBGYXN0aWZ5UmVxdWVzdDx7IFBhcmFtczogUmVzZXJ2YUdldFBhcmFtIH0+LCByZXBseTogRmFzdGlmeVJlcGx5KTogUHJvbWlzZTxGYXN0aWZ5UmVwbHkgfCB2b2lkPiA9PiB7XG4gICAgY29uc3QgcmVzZXJ2YVNlcnZpY2UgPSBERVBFTkRFTkNZX0NPTlRBSU5FUi5nZXQoUmVzZXJ2YUFwcFNlcnZpY2UpO1xuICAgIGNvbnN0IGlkID0gcmVxLnBhcmFtcy5pZDtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc2VydmFTZXJ2aWNlLmdldFJlc2VydmEoaWQpO1xuICAgIHJldHVybiByZXBseS5zZW5kKHsgLi4ucmVzcG9uc2UsIGlkOiByZXEuaWQgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVzZXJ2YVBvc3QgPSBhc3luYyAocmVxOiBGYXN0aWZ5UmVxdWVzdDx7IEJvZHk6IFJlc2VydmFQb3N0UGFyYW0gfT4sIHJlcGx5OiBGYXN0aWZ5UmVwbHkpOiBQcm9taXNlPEZhc3RpZnlSZXBseSB8IHZvaWQ+ID0+IHtcbiAgICBjb25zdCByZXNlcnZhU2VydmljZSA9IERFUEVOREVOQ1lfQ09OVEFJTkVSLmdldChSZXNlcnZhQXBwU2VydmljZSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNlcnZhU2VydmljZS5wb3N0UmVzZXJ2YShyZXEuYm9keSk7XG4gICAgcmV0dXJuIHJlcGx5LnNlbmQoeyAuLi5yZXNwb25zZSwgaWQ6IHJlcS5pZCB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlc2VydmFQYXRjaCA9IGFzeW5jIChyZXE6IEZhc3RpZnlSZXF1ZXN0PHsgQm9keTogUmVzZXJ2YVBhdGNoUGFyYW0gfT4sIHJlcGx5OiBGYXN0aWZ5UmVwbHkpOiBQcm9taXNlPEZhc3RpZnlSZXBseSB8IHZvaWQ+ID0+IHtcbiAgICBjb25zdCByZXNlcnZhU2VydmljZSA9IERFUEVOREVOQ1lfQ09OVEFJTkVSLmdldChSZXNlcnZhQXBwU2VydmljZSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXNlcnZhU2VydmljZS5wYXRjaFJlc2VydmEocmVxLmJvZHkpO1xuICAgIHJldHVybiByZXBseS5zZW5kKHsgLi4ucmVzcG9uc2UsIGlkOiByZXEuaWQgfSk7XG59XG5cbmV4cG9ydCBjb25zdCByZXNlcnZhRGVsZXRlID0gYXN5bmMgKHJlcTogRmFzdGlmeVJlcXVlc3Q8eyBQYXJhbXM6IFJlc2VydmFHZXRQYXJhbSB9PiwgcmVwbHk6IEZhc3RpZnlSZXBseSk6IFByb21pc2U8RmFzdGlmeVJlcGx5IHwgdm9pZD4gPT4ge1xuICAgIGNvbnN0IHJlc2VydmFTZXJ2aWNlID0gREVQRU5ERU5DWV9DT05UQUlORVIuZ2V0KFJlc2VydmFBcHBTZXJ2aWNlKTtcbiAgICBjb25zdCBpZCA9IHJlcS5wYXJhbXMuaWRcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc2VydmFTZXJ2aWNlLmRlbGV0ZVJlc2VydmEoaWQpO1xuICAgIHJldHVybiByZXBseS5zZW5kKHsgLi4ucmVzcG9uc2UsIGlkOiByZXEuaWQgfSk7XG59XG4iXX0=