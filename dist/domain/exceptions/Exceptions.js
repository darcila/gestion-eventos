"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirestoreException = exports.ApiClientException = exports.PubSubException = exports.RepositoryException = exports.UnauthorizedException = exports.BadMessageException = exports.Exception = void 0;
const ErrorCode_1 = require("./ErrorCode");
class Exception {
    constructor(message, code, statusCode, cause) {
        this.isError = true;
        this.message = message;
        this.code = code;
        this.statusCode = statusCode;
        this.cause = cause || null;
    }
}
exports.Exception = Exception;
class BadMessageException extends Exception {
    constructor(cause, message) {
        super(message, ErrorCode_1.ErrorCode.BAD_MESSAGE, ErrorCode_1.StatusCode.OK, cause);
    }
}
exports.BadMessageException = BadMessageException;
class UnauthorizedException extends Exception {
    constructor(cause, message) {
        super(message, ErrorCode_1.ErrorCode.UNAUTHORIZED, ErrorCode_1.StatusCode.UNAUTHORIZED, cause);
    }
}
exports.UnauthorizedException = UnauthorizedException;
class RepositoryException extends Exception {
    constructor() {
        const message = 'Ocurrió un error al momento de guardar la guía';
        super(message, ErrorCode_1.ErrorCode.REPOSITORY_ERROR, ErrorCode_1.StatusCode.INTERNAL_ERROR);
    }
}
exports.RepositoryException = RepositoryException;
class PubSubException extends Exception {
    constructor(message, cause) {
        super(message, ErrorCode_1.ErrorCode.PUBSUB_ERROR, ErrorCode_1.StatusCode.INTERNAL_ERROR, cause);
    }
}
exports.PubSubException = PubSubException;
class ApiClientException extends Exception {
    constructor(message) {
        super(message, ErrorCode_1.ErrorCode.API_CLIENT, ErrorCode_1.StatusCode.OK);
    }
}
exports.ApiClientException = ApiClientException;
class FirestoreException extends Exception {
    constructor(code, message) {
        const fsError = ErrorCode_1.ErrorCode.REPOSITORY_ERROR;
        switch (code) {
            case 1:
            case '1':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Firestore action cancelled');
                break;
            case 2:
            case '2':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Firestore unknown error');
                break;
            case 3:
            case '3':
                super(message, fsError, ErrorCode_1.StatusCode.OK, 'Firestore invalid argument');
                break;
            case 4:
            case '4':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Firestore deadline exceeded');
                break;
            case 5:
            case '5':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Update nonexistent document');
                break;
            case 6:
            case '6':
                super(message, fsError, ErrorCode_1.StatusCode.OK, 'Firestore document already exists');
                break;
            case 7:
            case '7':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Firestore permission denied');
                break;
            case 8:
            case '8':
                super(message, fsError, ErrorCode_1.StatusCode.OK, 'Firestore resource exhausted');
                break;
            case 9:
            case '9':
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Firestore precondition failed');
                break;
            default:
                super(message, fsError, ErrorCode_1.StatusCode.INTERNAL_ERROR, 'Defaulted unkwnown fs error');
                break;
        }
    }
}
exports.FirestoreException = FirestoreException;
//# sourceMappingURL=data:application/json;base64,